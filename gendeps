#!/usr/bin/env python

# Generates module dependancies for a Fortran file

import argparse
import re
from sys import stdout

parser = argparse.ArgumentParser(description=
                                 'Generate module dependancies for a Fortran file')
parser.add_argument('-o','--output', help='Output filename',
                    type=argparse.FileType('w'),default=stdout)
parser.add_argument('INPUT', help='Input Fortran file',
                    type=argparse.FileType('r'))

args = parser.parse_args()

infile = args.INPUT
outfile = args.output

# Regexs to find module references in the code
moduleDef = re.compile('module\s*(\S+)',re.IGNORECASE)
useDef = re.compile('use\s*(\S+)',re.IGNORECASE)

# Start with empty lists
modules = set()
uses = set()

# Read the file
for line in infile:
    # Strip comments
    stripped = line.split('!')[0].strip()

    # Check if the line matches a module or use, if so add to lists
    match = moduleDef.match(stripped)
    if match:
        modules.add(match.group(1).lower()+'.mod')
    match = useDef.match(stripped)
    if match:
        uses.add(match.group(1).lower()+'.mod')

dependencies = uses - modules

obj = re.sub(r'src/(\S+).f90',r'obj/\1.o',infile.name)
outfile.write(obj + ':' + ' '.join(dependencies) + '\n')
if modules:
    outfile.write(' '.join(modules) + ':' + obj + '\n')
outfile.write('OBJREQ_' + obj + '=' + 
              ' '.join('$(MODPROV_%s)'%mod for mod in dependencies)+'\n')
for mod in modules:
    outfile.write('MODPROV_'+mod+'='+obj+' '+'$(OBJREQ_'+obj+')\n')

infile.close()
outfile.close()
